<corto xmlns:corto="http://corto.io/packages/driver/fmt/xml">
    <corto:package name="corto/script/ast" url="http://corto.io/doc/corto">
        <corto:object name="Visitor" type="class"/>
        <corto:object name="Initializer" type="class"/>
        <corto:object name="Scope" type="class"/>
        <corto:object name="InitializerHelper" type="class"/>
        <corto:object name="Storage" type="class"/>
        <corto:object name="Expression" type="class"/>

        <class name="Node">
            <corto:scope>
                <member name="data" type="map{string,object}" modifiers="private"/>
                <method name="getData(string key)" return_type="object"/>
                <method name="setData(string key,object value)"/>
                <overridable name="visit(Visitor visitor)" return_type="int16"/>
            </corto:scope>
        </class>

        <class name="Statement" base="Node">
            <corto:scope>
                <member name="line" type="int32" modifiers="readonly"/>
                <member name="column" type="int32" modifiers="readonly"/>
            </corto:scope>
        </class>

        <class name="Use" base="Statement" base_modifiers="hidden">
            <corto:scope>
                <member name="package" type="string"/>
                <member name="alias" type="string"/>
                <member name="as_typesystem" type="bool"/>
            </corto:scope>
        </class>

        <class name="FunctionArgument" base="Node">
            <corto:scope>
                <member name="name" type="lang/string"/>
                <member name="type" type="script/ast/Storage"/>
                <member name="inout" type="inout"/>
                <member name="is_reference" type="bool"/>
            </corto:scope>
        </class>

        <class name="DeclarationIdentifier" base="Node" base_modifiers="hidden">
            <corto:scope>
                <member name="ids" type="list{script/ast/Storage}" modifiers="not_null"/>
                <member name="arguments" type="list{FunctionArgument}"/>
            </corto:scope>
        </class>

        <class name="Declaration" base="Statement" base_modifiers="hidden">
            <corto:scope>
                <member name="type" type="script/ast/Storage"/>
                <member name="id" type="DeclarationIdentifier"/>
                <member name="set_scope" type="lang/bool"/>
                <member name="is_var" type="lang/bool"/>
                <member name="initializer" type="script/ast/Initializer"/>
                <member name="scope" type="script/ast/Scope"/>
            </corto:scope>
        </class>

        <class name="Expression" base="Node">
            <corto:scope>
                <member name="ref_kind" type="lang/ref_kind" modifiers="readonly"/>
                <member name="is_object" type="bool" modifiers="readonly"/>
                <member name="type" type="lang/type" modifiers="private"/>
                <method name="isReference()" return_type="bool"/>
                <method name="getType()" return_type="lang/type"/>
                <method name="getTypeForTarget(lang/type target,ast/Expression target_expr)" return_type="lang/type"/>
                <overridable name="setType(lang/type type)"/>
                <overridable name="getPtr()" return_type="lang/word"/>
                <overridable name="fold()" return_type="Expression"/>
            </corto:scope>
        </class>

        <class name="Unary" base="Expression" base_modifiers="hidden">
            <corto:scope>
                <member name="expr" type="Expression"/>
                <member name="operator" type="operatorKind"/>
                <member name="postfix" type="bool"/>
                <override name="setType(lang/type type)"/>
                <override name="fold()" return_type="Expression"/>
            </corto:scope>
        </class>

        <class name="Binary" base="Expression" base_modifiers="hidden">
            <corto:scope>
                <member name="left" type="Expression"/>
                <member name="right" type="Expression"/>
                <member name="operator" type="operatorKind"/>
                <member name="operand_type" type="lang/type" modifiers="readonly"/>
                <method name="construct()" return_type="int16"/>
                <override name="setType(lang/type type)"/>
                <override name="fold()" return_type="Expression"/>
            </corto:scope>
        </class>

        <class name="Ternary" base="Expression" base_modifiers="hidden">
            <corto:scope>
                <member name="cond" type="Expression"/>
                <member name="true" type="Expression"/>
                <member name="false" type="Expression"/>
                <override name="setType(lang/type type)"/>
                <override name="fold()" return_type="Expression"/>
            </corto:scope>
        </class>

        <class name="Cast" base="Expression" base_modifiers="hidden">
            <corto:scope>
                <member name="type" type="script/ast/Storage"/>
                <member name="expr" type="Expression"/>
            </corto:scope>
        </class>

        <class name="InitializerValue" base="Node" base_modifiers="hidden">
            <corto:scope>
                <member name="key" type="string"/>
                <member name="value" type="Expression"/>
            </corto:scope>
        </class>

        <class name="Initializer" base="Expression" base_modifiers="hidden">
            <corto:scope>
                <member name="collection" type="bool"/>
                <member name="values" type="list{script/ast/InitializerValue}" modifiers="not_null"/>
                <method name="apply(word helper)" return_type="int16"/>
                <method name="propagateType(lang/type type)" return_type="int16"/>
                <override name="fold()" return_type="Expression"/>
            </corto:scope>
        </class>

        <class name="Storage" base="Expression">
            <corto:scope>
                <member name="value" type="word" modifiers="local"/>
                <method name="set_object(object obj)"/>
                <method name="get_object()" return_type="object"/>
                <overridable name="getPtr()" return_type="lang/word"/>
            </corto:scope>
        </class>

        <class name="Identifier" base="Storage">
            <corto:scope>
                <member name="id" type="string"/>
            </corto:scope>
        </class>

        <class name="StorageInitializer" base="Storage">
            <corto:scope>
                <member name="expr" type="Storage"/>
                <member name="initializer" type="script/ast/Initializer"/>
            </corto:scope>
        </class>

        <class name="Member" base="Storage" base_modifiers="hidden">
            <corto:scope>
                <member name="expr" type="Storage"/>
                <member name="key" type="string"/>
                <member name="member" type="lang/member" modifiers="hidden"/>
            </corto:scope>
        </class>

        <class name="Literal" base="Expression" base_modifiers="hidden"/>

        <class name="Number" base="Literal" base_modifiers="hidden">
            <corto:scope>
                <member name="unit" type="string"/>
            </corto:scope>
        </class>

        <class name="Boolean" base="Literal" base_modifiers="hidden">
            <corto:scope>
                <member name="value" type="bool"/>
                <method name="init()" return_type="int16"/>
                <override name="getPtr()" return_type="lang/word"/>
            </corto:scope>
        </class>

        <class name="Character" base="Literal" base_modifiers="hidden">
            <corto:scope>
                <member name="value" type="char"/>
                <method name="init()" return_type="int16"/>
                <override name="getPtr()" return_type="lang/word"/>
            </corto:scope>
        </class>

        <class name="Integer" base="Number">
            <corto:scope>
                <member name="value" type="uint64"/>
                <method name="init()" return_type="int16"/>
                <override name="getPtr()" return_type="lang/word"/>
            </corto:scope>
        </class>

        <class name="SignedInteger" base="Number">
            <corto:scope>
                <member name="value" type="int64"/>
                <method name="init()" return_type="int16"/>
                <override name="getPtr()" return_type="lang/word"/>
            </corto:scope>
        </class>

        <class name="FloatingPoint" base="Number">
            <corto:scope>
                <member name="value" type="float64"/>
                <method name="init()" return_type="int16"/>
                <override name="getPtr()" return_type="lang/word"/>
            </corto:scope>
        </class>

        <class name="String" base="Literal" base_modifiers="readonly">
            <corto:scope>
                <member name="value" type="string"/>
                <member name="delim" type="char"/>
                <method name="init()" return_type="int16"/>
                <override name="getPtr()" return_type="lang/word"/>
            </corto:scope>
        </class>

        <class name="Null" base="Literal" base_modifiers="hidden"/>

        <class name="Scope" base="Node">
            <corto:scope>
                <member name="parent" type="Scope"/>
                <member name="default_type" type="Storage"/>
                <member name="statements" type="list{script/ast/Statement}" modifiers="readonly|not_null"/>
                <method name="addStatement(Statement node)"/>
                <overridable name="visit(Visitor visitor)" return_type="int16"/>
            </corto:scope>
        </class>

        <class name="Visitor">
            <corto:scope>
                <member name="file" type="string"/>
                <member name="errors" type="int32" modifiers="readonly"/>
                <method name="visit(Node node)" return_type="int16"/>
                <overridable name="visitScope(Scope node)" return_type="int16"/>
                <overridable name="visitStatement(Statement node)" return_type="int16"/>
                <overridable name="visitUse(Use node)" return_type="int16"/>
                <overridable name="visitDeclaration(Declaration node)" return_type="int16"/>
                <overridable name="visitExpression(Expression node)" return_type="int16"/>
                <overridable name="visitUnary(ast/Unary node)" return_type="int16"/>
                <overridable name="visitBinary(ast/Binary node)" return_type="int16"/>
                <overridable name="visitTernary(ast/Ternary node)" return_type="int16"/>
                <overridable name="visitStorage(script/ast/Storage node)" return_type="int16"/>
                <overridable name="visitInitializer(script/ast/Initializer node)" return_type="int16"/>
                <overridable name="visitFunctionArguments(list{FunctionArgument} arguments)" return_type="int16"/>
                <overridable name="visitFunctionArgument(FunctionArgument argument)" return_type="int16"/>
            </corto:scope>
        </class>

    </corto:package>
</corto>
